//2021年2月24日21点10分

-- TABLE products:
+---------+---------+----------------+------------+----------------------------------------------------------------+
| prod_id | vend_id | prod_name      | prod_price | prod_desc                                                      |
+---------+---------+----------------+------------+----------------------------------------------------------------+
| ANV01   |    1001 | .5 ton anvil   |       5.99 | .5 ton anvil, black, complete with handy hook                  |
| ANV02   |    1001 | 1 ton anvil    |       9.99 | 1 ton anvil, black, complete with handy hook and carrying case |
| ANV03   |    1001 | 2 ton anvil    |      14.99 | 2 ton anvil, black, complete with handy hook and carrying case |
| DTNTR   |    1003 | Detonator      |      13.00 | Detonator (plunger powered), fuses not included                |
| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable for road runners)                          |
| FC      |    1003 | Carrots        |       2.50 | Carrots (rabbit hunting season only)                           |
| FU1     |    1002 | Fuses          |       3.42 | 1 dozen, extra long                                            |
| JP1000  |    1005 | JetPack 1000   |      35.00 | JetPack 1000, intended for single use                          |
| JP2000  |    1005 | JetPack 2000   |      55.00 | JetPack 2000, multi-use                                        |
| OL1     |    1002 | Oil can        |       8.99 | Oil can, red                                                   |
| SAFE    |    1003 | Safe           |      50.00 | Safe with combination lock                                     |
| SLING   |    1003 | Sling          |       4.49 | Sling, one size fits all                                       |
| TNT1    |    1003 | TNT (1 stick)  |       2.50 | TNT, red, single stick                                         |
| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                                    |
+---------+---------+----------------+------------+----------------------------------------------------------------+

-- TABLE vendors:
+---------+----------------+-----------------+-------------+------------+----------+--------------+
| vend_id | vend_name      | vend_address    | vend_city   | vend_state | vend_zip | vend_country |
+---------+----------------+-----------------+-------------+------------+----------+--------------+
|    1001 | Anvils R Us    | 123 Main Street | Southfield  | MI         | 48075    | USA          |
|    1002 | LT Supplies    | 500 Park Street | Anytown     | OH         | 44333    | USA          |
|    1003 | ACME           | 555 High Street | Los Angeles | CA         | 90046    | USA          |
|    1004 | Furball Inc.   | 1000 5th Avenue | New York    | NY         | 11111    | USA          |
|    1005 | Jet Set        | 42 Galaxy Road  | London      | NULL       | N16 6PS  | England      |
|    1006 | Jouets Et Ours | 1 Rue Amusement | Paris       | NULL       | 45678    | France       |
+---------+----------------+-----------------+-------------+------------+----------+--------------+

-----------------------------------------------------------------------------------------

-- 基本字符匹配
mysql> SELECT prod_name 
       FROM products 
       WHERE prod_name REGEXP '1000'        -- 通配符写法：LIKE '%1000%'
       ORDER BY prod_name;                  -- 检索列prod_name包含文本1000的所有行
+--------------+
| prod_name    |
+--------------+
| JetPack 1000 |
+--------------+

-- REGEXP告诉MySQL：REGEXP后所跟的东西作为正则表达式处理
-- 这个例子正则表达式确实没有带来太多好处，考虑下面的例子

mysql> SELECT prod_name 
       FROM products 
       WHERE prod_name REGEXP '.000'        -- 通配符写法：LIKE '%_000%'
       ORDER BY prod_name;
+--------------+
| prod_name    |
+--------------+
| JetPack 1000 |
| JetPack 2000 |
+--------------+

-- .是正则表达式语言中一个特殊的字符。它表示匹配任意一个字符

-- 比较LIKE和REGEXP: LIKE '1000'   REGEXP '1000'
-- LIKE匹配整个列，如果被匹配的文本在列值中出现，LIKE将不会找到它，相应的行也不被返回（除非使用通配符） （只有整个列值正好为'1000'才会被检索，如果还包含其他字符则不会被匹配）
-- REGEXP在列值内进行匹配，如果被匹配的文本在列值中出现，REGEXP将会找到它，相应的行将被返回         （REGEXP也能用来匹配整个列值，从而起与LIKE相同的作用，使用^和$定位符即可）
-- 总而言之：LIKE匹配整个串而REGEXP匹配字串

-- MySQL的正则表达式匹配不区分大小写。为区分大小写，可使用BINARY关键字，如 WHERE prod_name REGEXP BINARY 'JetPack .000'

-----------------------------------------------------------------------------------------

-- 进行OR匹配
mysql> SELECT prod_name 
       FROM products 
       WHERE prod_name REGEXP '1000|2000' 
       ORDER BY prod_name;                      -- 搜索两个串之一
+--------------+
| prod_name    |
+--------------+
| JetPack 1000 |
| JetPack 2000 |
+--------------+

-- |为正则表达式的OR操作符，它表示匹配其中之一。
-- 多个OR条件可并入单个正则表达式 '1000|2000|3000'

-----------------------------------------------------------------------------------------

-- 匹配几个字符之一
mysql> SELECT prod_name 
       FROM products 
       WHERE prod_name REGEXP '[123] Ton'       -- [123]的意思是匹配1或2或3
       ORDER BY prod_name;
+-------------+
| prod_name   |
+-------------+
| 1 ton anvil |
| 2 ton anvil |
+-------------+

-- []是另一种形式的OR语句。事实上，正则表达式[123]Ton为[1|2|3]Ton的缩写，也可以使用后者。但是需要用[]来定义OR语句查找什么，见下例

mysql> SELECT prod_name 
       FROM products 
       WHERE prod_name REGEXP '1|2|3 Ton' 
       ORDER BY prod_name;
+---------------+
| prod_name     |
+---------------+
| 1 ton anvil   |
| 2 ton anvil   |
| JetPack 1000  |
| JetPack 2000  |
| TNT (1 stick) |
+---------------+

-- 检索出另外3行的原因是MySQL假定你的意思是'1'或'2'或'3 ton'，除非把字符|括在一个集合中，否则它将应用于整个串
-- 字符集合也可以被否定，即它们将匹配除指定字符外的任何东西，只需在集合的开始出放置一个^即可    [^123]匹配除这些字符外的任何东西

-----------------------------------------------------------------------------------------

-- 匹配范围
mysql> SELECT prod_name 
       FROM products 
       WHERE prod_name REGEXP '[1-5] Ton'       -- 匹配1到5
       ORDER BY prod_name;
+--------------+
| prod_name    |
+--------------+
| .5 ton anvil |
| 1 ton anvil  |
| 2 ton anvil  |
+--------------+

-- 集合可以用来定义匹配的一个或多个字符，[0123456789]等同于[0-9]，[a-z]匹配任意字母字符

-----------------------------------------------------------------------------------------

-- 匹配特殊字符（正则表达式语言由具有特殊含义的特殊字符构成，怎么匹配 . [] | - ）
mysql> SELECT vend_name 
       FROM vendors 
       WHERE vend_name REGEXP '.'
       ORDER BY vend_name;              
+----------------+
| vend_name      |
+----------------+
| ACME           |
| Anvils R Us    |
| Furball Inc.   |
| Jet Set        |
| Jouets Et Ours |
| LT Supplies    |
+----------------+

-- 结果非期望的输出， .匹配任意字符，因此每个行都被检索出来
-- 为了匹配特殊字符，必须进行转义处理，需用\\为前导，例如 \\.表示查找. \\-表示查找-

mysql> SELECT vend_name 
       FROM vendors 
       WHERE vend_name REGEXP '\\.' 
       ORDER BY vend_name;
+--------------+
| vend_name    |
+--------------+
| Furball Inc. |
+--------------+

-- 为了匹配反斜杠（\）字符本身，需要使用\\\

-----------------------------------------------------------------------------------------

-- 匹配字符类（使用预定义的字符集，也就是字符类来进行匹配）
[:alnum:] : 任意字母和数字
[:alpha:] : 任意字符
[:digit:] : 任意数字
[:lower:] : 任意小写字母
[:upper:] : 任意大写字母
等等

-----------------------------------------------------------------------------------------

-- 匹配多个实例

-- 正则表达式重复元字符
*       ：  0个或多个匹配
+       ：  1个或多个匹配（等于{1,}）
?       ：  0个或1个匹配（等于{0,1}）
{n}     ：  指定数目的匹配
{n,}    ：  不少于指定数目的匹配
{n,m}   ：  匹配数目的范围（m不超过255）

mysql> SELECT prod_name 
       FROM products 
       WHERE prod_name REGEXP '\\([0-9] sticks?\\)'
       ORDER BY prod_name;
+----------------+
| prod_name      |
+----------------+
| TNT (1 stick)  |
| TNT (5 sticks) |
+----------------+

-- \\(匹配(   
-- [0-9]匹配任意数字
-- sticks?匹配stick和sticks（s后的?使s可选，因为?匹配它前面的任何字符的0次或1次出现）
-- \\)匹配)

mysql> SELECT prod_name 
       FROM products 
       WHERE prod_name REGEXP '[[:digit:]]{4}'      -- 等同与[0-9][0-9][0-9][0-9]
       ORDER BY prod_name;                          -- 匹配连在一起的4位数字
+--------------+
| prod_name    |
+--------------+
| JetPack 1000 |
| JetPack 2000 |
+--------------+

-- 最外一层[]表示匹配几个字符之一，效果即[任意数字]    （实测去除最外一层[]也能得出一样的结果）
-- [:digit:]表示匹配任意数字
-- {4}表示前面的字符（任意数字）出现4次

-----------------------------------------------------------------------------------------

-- 定位符（匹配特定位置）

^       ：  文本的开始
$       ：  文本的结尾
[[:<:]] ：  词的开始
[[:>:]] ：  词的结尾

mysql> SELECT prod_name 
       FROM products 
       WHERE prod_name REGEXP '^[0-9\\.]' 
       ORDER BY prod_name;                      -- 找出以一个数（包括以小数点开始的数）开始的所有产品
+--------------+
| prod_name    |
+--------------+
| .5 ton anvil |
| 1 ton anvil  |
| 2 ton anvil  |
+--------------+

-- ^的双重用途： 在集合中（用[和]定义）用来否定该集合；用来指串的开始处
-- 使REGEXP起类似LIKE的作用：通过定位符^开始每个表达式，$结束每个表达式
-- 在不适用数据库表的情况下用SELECT来测试正则表达式。REGEXP检查总是返回0（没有匹配）或1（匹配） 

-- 例如
mysql> SELECT 'he1llo' REGEXP '[0-9]';
+-------------------------+
| 'he1llo' REGEXP '[0-9]' |
+-------------------------+
|                       1 |
+-------------------------+
